import os
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup
from dotenv import load_dotenv
import random
import re
import logging

from generation.generation_route import generate_route
from generation.generate_artwork_info import generate_artwork_info
from generation.generate_answer import generate_answer, generate_answer_max
from process_data.load_data import send_text_in_chunks, send_text_with_image
from generation.generate_goodbye_word import generate_goodbye_word
from validation.validation_QA import evaluate_hallucinations
from validation.validation_artworkinfo import evaluate_hallucinations_artworkinfo

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler()
    ]
)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

user_data = {}

def create_keyboard(buttons):
    keyboard = InlineKeyboardBuilder()
    for text, data in buttons:
        keyboard.button(text=text, callback_data=data)
    return keyboard.as_markup()

@dp.message(F.text == "/start")
@dp.message(F.text == "–°—Ç–∞—Ä—Ç")
async def start(message: Message):
    user_data[message.from_user.id] = {'state': 'route_mode', 'current_artwork_index': 0, 'last_shown_artwork_index': 0}
    keyboard = ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text="–°—Ç–∞—Ä—Ç")]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º—É –≤—ã—Å—Ç–∞–≤–æ—á–Ω–æ–º—É —Ñ–æ–Ω–¥—É –û–¶ ¬´–°–∏—Ä–∏—É—Å¬ª.\n"
        "\n"
        "–Ø —Å–æ–∑–¥–∞–Ω –Ω–∞ –±–∞–∑–µ –º–æ–¥–µ–ª–∏ GigaChat ‚Äî —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —è —É–º–µ—é –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –≤–µ—Å—Ç–∏ –Ω–∞—Å—Ç–æ—è—â—É—é –∂–∏–≤—É—é –±–µ—Å–µ–¥—É ü§ñ‚ú®\n"
        "\n"
        "–î–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è:\n"
        "üß† –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?\n"
        "üé® –ß–µ–º —Ç—ã —É–≤–ª–µ–∫–∞–µ—à—å—Å—è?\n"
        "üí° –ß—Ç–æ –ø—Ä–∏–≤–µ–ª–æ —Ç–µ–±—è —Å—é–¥–∞: —É—á–µ–±–∞, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ?\n"
        "\n"
        "–ù–∞–ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–æ–π–¥—ë—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ üòä", 
        reply_markup=keyboard)
    user_data[message.from_user.id]['state'] = 'awaiting_description'

@dp.message()
async def handle_user_input(message: Message):
    user_id = message.from_user.id
    state = user_data.get(user_id, {}).get('state')

    if state == 'awaiting_description':
        user_data[user_id]['user_description'] = message.text  
        user_data[user_id]['send_images'] = True  

        keyboard = create_keyboard([
            ("üïí –≠–∫—Å–ø—Ä–µ—Å—Å", "short"),
            ("‚è≥ –°—Ç–∞–Ω–¥–∞—Ä—Ç", "medium"),
            ("üï∞ –ü–æ–ª–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ", "long")
        ])

        await message.answer(
            "–Ø –æ—á–µ–Ω—å —Ä–∞–¥ —Å –≤–∞–º–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!üôå\n"
            "\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞:",
            reply_markup=keyboard
        )

        user_data[user_id]['state'] = 'awaiting_tour_length'

    elif state == 'route_mode':
        await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —è –≥–æ—Ç–æ–≤–ª—é –≤–∞—à –º–∞—Ä—à—Ä—É—Ç... ‚è≥")
        user_query = message.text
        user_description = user_data[user_id].get('user_description', '')
        top_k = user_data[user_id].get('top_k', 5)
        logging.debug(f'top_k: {top_k}')
        route, artworks = generate_route(top_k, user_description, user_query)
        user_data[user_id]['artworks'] = artworks

        clean_route = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s.,:"¬´¬ª]', '', route)
        await send_text_in_chunks(clean_route, lambda text: message.answer(text))

        keyboard = create_keyboard([("–î–∞, —è –≥–æ—Ç–æ–≤(–∞)", "next_artwork")])
        await message.answer("–í—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é?", reply_markup=keyboard)

    elif state == 'question_mode':
        await process_question(message)


@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    if callback.data in ["short", "medium", "long"]:
        await handle_tour_length(callback)
    elif callback.data == "next_artwork":
        await next_artwork(callback)
    elif callback.data == "end_tour":
        await end_tour(callback)

async def handle_tour_length(callback: CallbackQuery):
    user_id = callback.from_user.id
    tour_lengths = {
        "short": random.randint(2, 5),
        "medium": random.randint(8, 12),
        "long": random.randint(13, 20)
    }

    if callback.data in tour_lengths:
        user_data[user_id]['top_k'] = tour_lengths[callback.data]

    
    user_data[user_id]['state'] = 'route_mode'

    await callback.message.answer(
        "–ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.\n"
        "–¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞—Ç—å —Ç–µ–º—É, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–ª–∏ –¥–∞–∂–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã —Ä–∞–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, *—è—Ä–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã*, *—á—Ç–æ-—Ç–æ –ø—Ä–æ –ø—Ä–∏—Ä–æ–¥—É*, *—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ*).\n"
        "\n"
        "üìå –ß–µ–º —Ç–æ—á–Ω–µ–µ —Ç—ã —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—à—å –∏–Ω—Ç–µ—Ä–µ—Å ‚Äî —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –º–∞—Ä—à—Ä—É—Ç!"
    )


async def process_question(message: Message):
    user_id = message.from_user.id
    user_question = message.text
    index = user_data[user_id]['last_shown_artwork_index']
    artwork = user_data[user_id]['artworks'][index]
    user_description = user_data[user_id].get('user_description', '')

    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ! ‚è≥")
    answer = generate_answer(user_question, artwork, user_description)
    validation_res = evaluate_hallucinations(artwork.get("text"), answer, user_question)
    logging.debug(f'validation result:{ validation_res}')
    

    if validation_res.lower() == "false":
        await message.answer(answer)
    else: 
        answer_max = generate_answer_max(user_question, artwork, user_description)
        secondary_validation_res = evaluate_hallucinations(artwork.get("text"), answer_max, user_question)

        if secondary_validation_res.lower() == "false":
            await message.answer(answer_max)  
        else: 
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
    current_artwork_index = user_data[user_id]['current_artwork_index']

    if current_artwork_index < len(user_data[user_id]['artworks']):
        keyboard = create_keyboard([("–°–ª–µ–¥—É—é—â–∏–π —ç–∫—Å–ø–æ–Ω–∞—Ç", "next_artwork")])
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–∫—Å–ø–æ–Ω–∞—Ç—É", reply_markup=keyboard)
    else:
        keyboard = create_keyboard([("–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", "end_tour")])
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã. –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ–Ω–∞—Ç!", reply_markup=keyboard)


async def next_artwork(callback: CallbackQuery):
    user_id = callback.from_user.id
    current_artwork_index = user_data[user_id].get('current_artwork_index', 0) 
    user_data[user_id]['state'] = 'question_mode'
    user_data[user_id]['last_shown_artwork_index'] = current_artwork_index
    artwork = user_data[user_id]['artworks'][current_artwork_index]

    await callback.message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ! ‚è≥")
    artwork_info = generate_artwork_info(artwork.get("text"), user_data[user_id].get('user_description', ''))
    validation_res = evaluate_hallucinations_artworkinfo(artwork.get("text"), artwork_info)
    logging.debug(f'validation result:{ validation_res}')

    image_url = artwork.get("image")

    if image_url:
        await send_text_with_image(
            artwork_info, 
            image_url, 
            lambda text: callback.message.answer(text), 
            lambda url, caption: callback.message.answer_photo(url, caption=caption)
        )
    else:
        await send_text_in_chunks(artwork_info, lambda text: callback.message.answer(text))

    user_data[user_id]['current_artwork_index'] += 1

    if user_data[user_id]['current_artwork_index'] < len(user_data[user_id]['artworks']):
        keyboard = create_keyboard([("–°–ª–µ–¥—É—é—â–∏–π —ç–∫—Å–ø–æ–Ω–∞—Ç", "next_artwork")])
        await callback.message.answer("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ç–µ–∫—É—â–µ–º —ç–∫—Å–ø–æ–Ω–∞—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.", reply_markup=keyboard)
    else:
        keyboard = create_keyboard([("–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", "end_tour")])
        await callback.message.answer("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ç–µ–∫—É—â–µ–º —ç–∫—Å–ø–æ–Ω–∞—Ç–µ. –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ–Ω–∞—Ç –Ω–∞—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞!", reply_markup=keyboard)


async def end_tour(callback: CallbackQuery):
    user_id = callback.from_user.id
    museum_info = "\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –º–∏—Ä–æ–º –∏—Å–∫—É—Å—Å—Ç–≤–∞ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ: https://photo.sirius.ru/links/YwWpZAppgnsZYQhAKJvfFM"
    await callback.message.answer(generate_goodbye_word(user_data[user_id].get('user_description', '')) + museum_info)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
